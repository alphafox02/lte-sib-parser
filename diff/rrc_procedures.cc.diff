diff --git a/srsue/src/stack/rrc/rrc_procedures.cc b/srsue/src/stack/rrc/rrc_procedures.cc
index 6698f710d..20bebcb1f 100644
--- a/srsue/src/stack/rrc/rrc_procedures.cc
+++ b/srsue/src/stack/rrc/rrc_procedures.cc
@@ -28,6 +28,8 @@
 #include "srsran/interfaces/ue_usim_interfaces.h"
 #include "srsue/hdr/stack/rrc/rrc_meas.h"
 #include <inttypes.h> // for printing uint64_t
+#include <signal.h>
+#include <iostream>
 
 #define Error(fmt, ...) rrc_ptr->logger.error("Proc \"%s\" - " fmt, name(), ##__VA_ARGS__)
 #define Warning(fmt, ...) rrc_ptr->logger.warning("Proc \"%s\" - " fmt, name(), ##__VA_ARGS__)
@@ -431,6 +433,8 @@ srsran::proc_outcome_t rrc::serving_cell_config_proc::launch_sib_acquire()
   }
 
   Info("Serving Cell Configuration Procedure has finished successfully");
+  // our job done here. We can leave like a winners
+  raise(SIGTERM);
   return proc_outcome_t::success;
 }
 
@@ -1418,7 +1422,7 @@ srsran::proc_outcome_t rrc::connection_reest_proc::cell_criteria()
   // Not implemented yet.
 
   // 1> initiate transmission of the RRCConnectionReestablishmentRequest message in accordance with 5.3.7.4;
-  rrc_ptr->send_con_restablish_request(reest_cause, reest_rnti, reest_source_pci, reest_cellid);
+  //rrc_ptr->send_con_restablish_request(reest_cause, reest_rnti, reest_source_pci, reest_cellid);
 
   state = state_t::wait_reest_msg;
   return proc_outcome_t::yield;
