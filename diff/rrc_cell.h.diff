diff --git a/srsue/hdr/stack/rrc/rrc_cell.h b/srsue/hdr/stack/rrc/rrc_cell.h
index d01a6b00f..1c6a9cba1 100644
--- a/srsue/hdr/stack/rrc/rrc_cell.h
+++ b/srsue/hdr/stack/rrc/rrc_cell.h
@@ -80,6 +80,11 @@ public:
   bool has_sib1() const { return has_valid_sib1; }
   bool has_sib2() const { return has_valid_sib2; }
   bool has_sib3() const { return has_valid_sib3; }
+  bool has_sib4() const { return has_valid_sib4; }
+  bool has_sib5() const { return has_valid_sib5; }
+  bool has_sib6() const { return has_valid_sib6; }
+  bool has_sib7() const { return has_valid_sib7; }
+  bool has_sib8() const { return has_valid_sib8; }
   bool has_sib13() const { return has_valid_sib13; }
   bool has_sib(uint32_t index) const;
   bool has_sibs(srsran::span<const uint32_t> indexes) const;
@@ -91,6 +96,11 @@ public:
     has_valid_sib1  = false;
     has_valid_sib2  = false;
     has_valid_sib3  = false;
+    has_valid_sib4  = false;
+    has_valid_sib5  = false;
+    has_valid_sib6  = false;
+    has_valid_sib7  = false;
+    has_valid_sib8  = false;
     has_valid_sib13 = false;
   }
 
@@ -111,6 +121,11 @@ protected:
   bool                         has_valid_sib1  = false;
   bool                         has_valid_sib2  = false;
   bool                         has_valid_sib3  = false;
+  bool                         has_valid_sib4  = false;
+  bool                         has_valid_sib5  = false;
+  bool                         has_valid_sib6  = false;
+  bool                         has_valid_sib7  = false;
+  bool                         has_valid_sib8  = false;
   bool                         has_valid_sib13 = false;
   std::map<uint32_t, uint32_t> sib_info_map; ///< map of sib_index to index of schedInfoList in SIB1
 };
@@ -128,10 +143,20 @@ public:
   void set_sib1(const asn1::rrc_nr::sib1_s& sib1_);
   void set_sib2(const asn1::rrc_nr::sib2_s& sib2_);
   void set_sib3(const asn1::rrc_nr::sib3_s& sib3_);
+  void set_sib4(const asn1::rrc_nr::sib4_s& sib4_);
+  void set_sib5(const asn1::rrc_nr::sib5_s& sib5_);
+  void set_sib6(const asn1::rrc_nr::sib6_s& sib6_);
+  void set_sib7(const asn1::rrc_nr::sib7_s& sib7_);
+  void set_sib8(const asn1::rrc_nr::sib8_s& sib8_);
 
   const asn1::rrc_nr::sib1_s* sib1ptr() const { return has_sib1() ? &sib1 : nullptr; }
   const asn1::rrc_nr::sib2_s* sib2ptr() const { return has_sib2() ? &sib2 : nullptr; }
   const asn1::rrc_nr::sib3_s* sib3ptr() const { return has_sib3() ? &sib3 : nullptr; }
+  const asn1::rrc_nr::sib4_s* sib4ptr() const { return has_sib1() ? &sib4 : nullptr; }
+  const asn1::rrc_nr::sib5_s* sib5ptr() const { return has_sib1() ? &sib5 : nullptr; }
+  const asn1::rrc_nr::sib6_s* sib6ptr() const { return has_sib1() ? &sib6 : nullptr; }
+  const asn1::rrc_nr::sib7_s* sib7ptr() const { return has_sib1() ? &sib7 : nullptr; }
+  const asn1::rrc_nr::sib8_s* sib8ptr() const { return has_sib1() ? &sib8 : nullptr; }
 
   uint32_t get_cell_id() const { return (uint32_t)0xFFFF; } // TODO find the correct sib
 
@@ -144,6 +169,11 @@ public:
   asn1::rrc_nr::sib1_s  sib1     = {};
   asn1::rrc_nr::sib2_s  sib2     = {};
   asn1::rrc_nr::sib3_s  sib3     = {};
+  asn1::rrc_nr::sib4_s  sib4     = {};
+  asn1::rrc_nr::sib5_s  sib5     = {};
+  asn1::rrc_nr::sib6_s  sib6     = {};
+  asn1::rrc_nr::sib7_s  sib7     = {};
+  asn1::rrc_nr::sib8_s  sib8     = {};
   asn1::rrc::mcch_msg_s mcch     = {};
 };
 
@@ -162,11 +192,21 @@ public:
   void set_sib1(const asn1::rrc::sib_type1_s& sib1_);
   void set_sib2(const asn1::rrc::sib_type2_s& sib2_);
   void set_sib3(const asn1::rrc::sib_type3_s& sib3_);
+  void set_sib4(const asn1::rrc::sib_type4_s& sib4_);
+  void set_sib5(const asn1::rrc::sib_type5_s& sib5_);
+  void set_sib6(const asn1::rrc::sib_type6_s& sib6_);
+  void set_sib7(const asn1::rrc::sib_type7_s& sib7_);
+  void set_sib8(const asn1::rrc::sib_type8_s& sib8_);
   void set_sib13(const asn1::rrc::sib_type13_r9_s& sib13_);
 
   const asn1::rrc::sib_type1_s*     sib1ptr() const { return has_sib1() ? &sib1 : nullptr; }
   const asn1::rrc::sib_type2_s*     sib2ptr() const { return has_sib2() ? &sib2 : nullptr; }
   const asn1::rrc::sib_type3_s*     sib3ptr() const { return has_sib3() ? &sib3 : nullptr; }
+  const asn1::rrc::sib_type4_s*     sib4ptr() const { return has_sib4() ? &sib4 : nullptr; }
+  const asn1::rrc::sib_type5_s*     sib5ptr() const { return has_sib5() ? &sib5 : nullptr; }
+  const asn1::rrc::sib_type6_s*     sib6ptr() const { return has_sib6() ? &sib6 : nullptr; }
+  const asn1::rrc::sib_type7_s*     sib7ptr() const { return has_sib7() ? &sib7 : nullptr; }
+  const asn1::rrc::sib_type8_s*     sib8ptr() const { return has_sib8() ? &sib8 : nullptr; }
   const asn1::rrc::sib_type13_r9_s* sib13ptr() const { return has_sib13() ? &sib13 : nullptr; }
 
   uint32_t get_cell_id() const { return (uint32_t)sib1.cell_access_related_info.cell_id.to_number(); }
@@ -182,6 +222,11 @@ public:
   asn1::rrc::sib_type1_s     sib1     = {};
   asn1::rrc::sib_type2_s     sib2     = {};
   asn1::rrc::sib_type3_s     sib3     = {};
+  asn1::rrc::sib_type4_s     sib4     = {};
+  asn1::rrc::sib_type5_s     sib5     = {};
+  asn1::rrc::sib_type6_s     sib6     = {};
+  asn1::rrc::sib_type7_s     sib7     = {};
+  asn1::rrc::sib_type8_s     sib8     = {};
   asn1::rrc::sib_type13_r9_s sib13    = {};
   asn1::rrc::mcch_msg_s      mcch     = {};
 
