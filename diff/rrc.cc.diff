diff --git a/srsue/src/stack/rrc/rrc.cc b/srsue/src/stack/rrc/rrc.cc
index 8ad751683..be4f40067 100644
--- a/srsue/src/stack/rrc/rrc.cc
+++ b/srsue/src/stack/rrc/rrc.cc
@@ -33,16 +33,20 @@
 #include "srsue/hdr/stack/rrc/rrc_meas.h"
 #include "srsue/hdr/stack/rrc/rrc_procedures.h"
 
+#include "../../scanner_helpers.h"
+#include "json.hpp"
 #include <cstdlib>
 #include <ctime>
+#include <fstream>
 #include <inttypes.h> // for printing uint64_t
 #include <iostream>
 #include <math.h>
 #include <numeric>
-#include <string.h>
+#include <stdio.h>
 
 bool simulate_rlf = false;
 
+using json = nlohmann::json;
 using namespace srsran;
 using namespace asn1::rrc;
 using srsran::lte_srb;
@@ -50,8 +54,8 @@ using srsran::srb_to_lcid;
 
 namespace srsue {
 
-const static uint32_t NOF_REQUIRED_SIBS                = 4;
-const static uint32_t required_sibs[NOF_REQUIRED_SIBS] = {0, 1, 2, 12}; // SIB1, SIB2, SIB3 and SIB13 (eMBMS)
+const static uint32_t NOF_REQUIRED_SIBS                = 8;
+const static uint32_t required_sibs[NOF_REQUIRED_SIBS] = {0, 1, 2, 3, 4, 5, 6, 7}; // SIB1, SIB2, SIB3 and SIB13 (eMBMS)
 
 /*******************************************************************************
   Base functions
@@ -1270,6 +1274,45 @@ void rrc::write_pdu_bcch_dlsch(unique_byte_buffer_t pdu)
   parse_pdu_bcch_dlsch(std::move(pdu));
 }
 
+template <class T>
+void rrc::print_sib(int       sib_index,
+                    const T&  msg)
+{
+    if (program_stopping)
+      return;
+    fprintf(stderr, "found valid SIB, increasing timeout to 10\n");
+    time_spent -= 10;
+    asn1::json_writer json_writer;
+    msg.to_json(json_writer);
+
+    auto root = json::parse(json_writer.to_string().c_str());
+    std::ofstream sib_out;
+    system(("mkdir -p /tmp/srsue_sibs_acquired/"+std::to_string(dl_earfcn)).c_str());
+
+    for ( unsigned int index = 0; index < root.size(); index++ ){
+      auto sibTypeInfo = root[index]["BCCH-DL-SCH-Message"]["message"]["c1"];
+      sib_out.open("/tmp/srsue_sibs_acquired/"+std::to_string(dl_earfcn)+"/"+std::to_string(sib_index)+".json");
+
+      if (sib_index == 1){
+        printf("%s\n", sibTypeInfo.dump(4).c_str());
+        sib_out << sibTypeInfo.dump(4);
+      }else {
+        for (unsigned int _sib_index = 0; _sib_index < sibTypeInfo.size(); _sib_index++) {
+          if (sibTypeInfo["systemInformation"]["criticalExtensions"]
+                         ["systemInformation-r8"]["sib-TypeAndInfo"]
+                         [_sib_index].contains("sib"+std::to_string(sib_index))){
+
+            printf("%s\n", sibTypeInfo["systemInformation"]["criticalExtensions"]
+                                      ["systemInformation-r8"]["sib-TypeAndInfo"][_sib_index].dump(4).c_str());
+            sib_out << sibTypeInfo["systemInformation"]["criticalExtensions"]
+            ["systemInformation-r8"]["sib-TypeAndInfo"][_sib_index].dump(4);
+          }
+        }
+      }
+      sib_out.close();
+    }
+}
+
 void rrc::parse_pdu_bcch_dlsch(unique_byte_buffer_t pdu)
 {
   // Stop BCCH search after successful reception of 1 BCCH block
@@ -1283,14 +1326,14 @@ void rrc::parse_pdu_bcch_dlsch(unique_byte_buffer_t pdu)
     logger.error(pdu->msg, pdu->N_bytes, "Could not unpack BCCH DL-SCH message (%d B).", pdu->N_bytes);
     return;
   }
-
   log_rrc_message("BCCH-DLSCH", Rx, pdu.get(), dlsch_msg, dlsch_msg.msg.c1().type().to_string());
-
   if (dlsch_msg.msg.c1().type() == bcch_dl_sch_msg_type_c::c1_c_::types::sib_type1) {
     logger.info("Processing SIB1 (1/1)");
     meas_cells.serving_cell().set_sib1(dlsch_msg.msg.c1().sib_type1());
     si_acquirer.trigger(si_acquire_proc::sib_received_ev{});
     handle_sib1();
+
+    print_sib(1, dlsch_msg);
   } else {
     sys_info_r8_ies_s::sib_type_and_info_l_& sib_list =
         dlsch_msg.msg.c1().sys_info().crit_exts.sys_info_r8().sib_type_and_info;
@@ -1300,6 +1343,7 @@ void rrc::parse_pdu_bcch_dlsch(unique_byte_buffer_t pdu)
         case sib_info_item_c::types::sib2:
           if (not meas_cells.serving_cell().has_sib2()) {
             meas_cells.serving_cell().set_sib2(sib_list[i].sib2());
+            print_sib(2, dlsch_msg);
           }
           handle_sib2();
           si_acquirer.trigger(si_acquire_proc::sib_received_ev{});
@@ -1307,10 +1351,46 @@ void rrc::parse_pdu_bcch_dlsch(unique_byte_buffer_t pdu)
         case sib_info_item_c::types::sib3:
           if (not meas_cells.serving_cell().has_sib3()) {
             meas_cells.serving_cell().set_sib3(sib_list[i].sib3());
+            print_sib(3, dlsch_msg);
           }
           handle_sib3();
           si_acquirer.trigger(si_acquire_proc::sib_received_ev{});
           break;
+        case sib_info_item_c::types::sib4:
+          if (not meas_cells.serving_cell().has_sib4()) {
+            meas_cells.serving_cell().set_sib4(sib_list[i].sib4());
+            print_sib(4, dlsch_msg);
+          }
+          si_acquirer.trigger(si_acquire_proc::sib_received_ev{});
+          break;
+        case sib_info_item_c::types::sib5:
+          if (not meas_cells.serving_cell().has_sib5()) {
+            meas_cells.serving_cell().set_sib5(sib_list[i].sib5());
+            print_sib(5, dlsch_msg);
+          }
+          si_acquirer.trigger(si_acquire_proc::sib_received_ev{});
+          break;
+        case sib_info_item_c::types::sib6:
+          if (not meas_cells.serving_cell().has_sib6()) {
+            meas_cells.serving_cell().set_sib6(sib_list[i].sib6());
+            print_sib(6, dlsch_msg);
+          }
+          si_acquirer.trigger(si_acquire_proc::sib_received_ev{});
+          break;
+        case sib_info_item_c::types::sib7:
+          if (not meas_cells.serving_cell().has_sib7()) {
+            meas_cells.serving_cell().set_sib7(sib_list[i].sib7());
+            print_sib(7, dlsch_msg);
+          }
+          si_acquirer.trigger(si_acquire_proc::sib_received_ev{});
+          break;
+        case sib_info_item_c::types::sib8:
+          if (not meas_cells.serving_cell().has_sib8()) {
+            meas_cells.serving_cell().set_sib8(sib_list[i].sib8());
+            print_sib(8, dlsch_msg);
+          }
+          si_acquirer.trigger(si_acquire_proc::sib_received_ev{});
+          break;
         case sib_info_item_c::types::sib13_v920:
           if (not meas_cells.serving_cell().has_sib13()) {
             meas_cells.serving_cell().set_sib13(sib_list[i].sib13_v920());
