diff --git a/lib/examples/cell_search.c b/lib/examples/cell_search.c
index 636022b5e..59b0c4c14 100644
--- a/lib/examples/cell_search.c
+++ b/lib/examples/cell_search.c
@@ -129,7 +129,7 @@ bool go_exit = false;
 
 void sig_int_handler(int signo)
 {
-  printf("SIGINT received. Exiting...\n");
+  fprintf(stderr, "SIGINT received. Exiting...\n");
   if (signo == SIGINT) {
     go_exit = true;
   }
@@ -155,7 +155,7 @@ int main(int argc, char** argv)
 
   parse_args(argc, argv);
 
-  printf("Opening RF device...\n");
+  fprintf(stderr, "Opening RF device...\n");
 
   if (srsran_rf_open_devname(&rf, rf_dev, rf_args, 1)) {
     ERROR("Error opening rf");
@@ -164,7 +164,7 @@ int main(int argc, char** argv)
   if (!cell_detect_config.init_agc) {
     srsran_rf_set_rx_gain(&rf, rf_gain);
   } else {
-    printf("Starting AGC thread...\n");
+    fprintf(stderr, "Starting AGC thread...\n");
     if (srsran_rf_start_gain_thread(&rf, false)) {
       ERROR("Error opening rf");
       exit(-1);
@@ -178,6 +178,7 @@ int main(int argc, char** argv)
   nof_freqs = srsran_band_get_fd_band(band, channels, earfcn_start, earfcn_end, MAX_EARFCN);
   if (nof_freqs < 0) {
     ERROR("Error getting EARFCN list");
+    printf("cell_search: Error getting EARFCN list\n");
     exit(-1);
   }
 
@@ -189,6 +190,7 @@ int main(int argc, char** argv)
 
   if (srsran_ue_cellsearch_init(&cs, cell_detect_config.max_frames_pss, srsran_rf_recv_wrapper, (void*)&rf)) {
     ERROR("Error initiating UE cell detect");
+    printf("cell_search: Error initiating UE cell detect\n");
     exit(-1);
   }
 
@@ -209,19 +211,15 @@ int main(int argc, char** argv)
     srsran_rf_set_rx_freq(&rf, 0, (double)channels[freq].fd * MHZ);
     INFO("Set rf_freq to %.3f MHz", (double)channels[freq].fd * MHZ / 1000000);
 
-    printf(
+    fprintf(stderr,
         "[%3d/%d]: EARFCN %d Freq. %.2f MHz looking for PSS.\n", freq, nof_freqs, channels[freq].id, channels[freq].fd);
-    fflush(stdout);
 
     if (SRSRAN_VERBOSE_ISINFO()) {
       printf("\n");
     }
 
     bzero(found_cells, 3 * sizeof(srsran_ue_cellsearch_result_t));
-
-    INFO("Setting sampling frequency %.2f MHz for PSS search", SRSRAN_CS_SAMP_FREQ / 1000000);
     srsran_rf_set_rx_srate(&rf, SRSRAN_CS_SAMP_FREQ);
-    INFO("Starting receiver...");
     srsran_rf_start_rx_stream(&rf, false);
 
     n = srsran_ue_cellsearch_scan(&cs, found_cells, NULL);
@@ -240,7 +238,7 @@ int main(int argc, char** argv)
             exit(-1);
           }
           if (ret == SRSRAN_UE_MIB_FOUND) {
-            printf("Found CELL ID %d. %d PRB, %d ports\n", cell.id, cell.nof_prb, cell.nof_ports);
+            fprintf(stderr, "[+] Found CELL ID %d. %d PRB, %d ports ", cell.id, cell.nof_prb, cell.nof_ports);
             if (cell.nof_ports > 0) {
               results[n_found_cells].cell      = cell;
               results[n_found_cells].freq      = channels[freq].fd;
@@ -248,25 +246,15 @@ int main(int argc, char** argv)
               results[n_found_cells].power     = found_cells[i].peak;
               n_found_cells++;
             }
+            srsran_ue_cellsearch_free(&cs);
+            srsran_rf_close(&rf);
+            printf("%d", channels[freq].id);
+            exit(0);
           }
         }
       }
     }
   }
-
-  printf("\n\nFound %d cells\n", n_found_cells);
-  for (int i = 0; i < n_found_cells; i++) {
-    printf("Found CELL %.1f MHz, EARFCN=%d, PHYID=%d, %d PRB, %d ports, PSS power=%.1f dBm\n",
-           results[i].freq,
-           results[i].dl_earfcn,
-           results[i].cell.id,
-           results[i].cell.nof_prb,
-           results[i].cell.nof_ports,
-           srsran_convert_power_to_dB(results[i].power));
-  }
-
-  printf("\nBye\n");
-
   srsran_ue_cellsearch_free(&cs);
   srsran_rf_close(&rf);
   exit(0);
